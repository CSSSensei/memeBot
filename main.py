#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚£¥‚†∂‚†∂‚†∂‚†∂‚†∂‚†∂‚†∂‚†∂‚£∂‚£∂‚£∂‚£∂‚£∂‚†∂‚†∂‚†∂‚†∂‚†∂‚†∂‚†∂‚¢∂‚£§‚£§‚£§‚£Ñ‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚°ø‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°†‚†î‚†í‚¢â‚£â‚£Ä‚£†‚††‚¢Ñ‚£†‚£Ä‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚£â‚£õ‚£õ‚°õ‚†∑‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£º‚†è‚†Ä‚†Ä‚†Ä‚¢Ä‚†¥‚†ä‚£°‚†î‚£ö‚°©‚†•‚†§‚†§‚†î‚†¶‚¢§‚†Ñ‚†Ä‚†Ä‚†à‚†â‚†â‚†â‚†â‚£â‚£â‚£â‚£Ä‚£Ä‚†Ä‚†â‚†Ä‚†à‚†ô‚†ª‚£¶‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†è‚†Ä‚†Ä‚†Ä‚†ä‚¢Å‚°¥‚¢ã‚†¥‚†ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢£‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢π‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†¢‚°Ä‚†Ä‚†Ä‚†Ä‚†∏‚£∑‚†Ä‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£æ‚†è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ê‚†Å‚£Ä‚£§‚£¥‚£∂‚£∂‚£∂‚°∂‚£∂‚£§‚£Ä‚†à‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°é‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†ë‚†Ä‚†Ä‚†Ä‚†Ä‚¢ø‚°Ñ‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚¢Ä‚£¥‚£ø‚£∑‚°§‚†Ñ‚†Ä‚†Ä‚†Ä‚£§‚°î‚†Ä‚£æ‚£ø‚£Ω‚£ø‚£ø‚£ø‚£ø‚£§‚£Ñ‚°â‚†ª‚£∑‚°Ü‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£§‚£∂‚£ø‚£ø‚£ø‚£ø‚£ø‚£∑‚†Ñ‚†§‚†§‚†§‚¢§‚£à‚†ª‚£∂‚°Ä‚†Ä
#         ‚†Ä‚£¥‚¢ü‚°ü‚†Å‚¢Ä‚£¥‚°∂‚†æ‚†∂‚£∂‚£§‚£à‚°Å‚†à‚†â‚†Ä‚£Ä‚£¥‚°ó‚†Ä‚†â‚†ô‚†ª‚¢ø‚†ü‚†Å‚†Ä‚†Ä‚†Ä‚†ô‚¢ª‚£ø‚†õ‚†ã‚†â‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚£Ä‚†∞‚¢å‚†ì‚¢å‚¢ø‚°Ñ
#         ‚£∏‚°è‚¢∏‚†Ä‚£∞‚°ø‚†Å‚†Ä‚¢†‚£∑‚°Ä‚†â‚†ô‚†õ‚†ª‚†ø‚†ü‚†õ‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚£ø‚°Ä‚†Ä‚†Ä‚†Ä‚¢∂‚£§‚£§‚£æ‚†ü‚†õ‚†õ‚†ø‚†Ü‚°á‚¢ò‚£æ‚°á
#         ‚£ø‚°Ñ‚¢∏‚†Ä‚£ø‚°á‚£†‚£¥‚£ø‚°ü‚†ª‚¢∑‚£¶‚£Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚£Ä‚°§‚¢¶‚£¥‚°∂‚†∂‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†ª‚£∑‚£Ñ‚†Ä‚†Ä‚†â‚†â‚†Å‚¢†‚£ø‚°Ä‚†Ä‚¢Ä‚†á‚¢∏‚£ª‚°á
#         ‚¢π‚£ß‚†ò‚°Ü‚†∏‚£ß‚†Ä‚†Ä‚¢π‚£∑‚£Ñ‚†Ä‚†à‚†ô‚£ø‚°∑‚£∂‚£§‚£Ñ‚£Ä‚†Ä‚†Ä‚†ò‚£∑‚°Ñ‚¢∂‚†∑‚†∂‚†¶‚†Ä‚†Ä‚†Ä‚¢Ä‚£¥‚°ø‚†ø‚†õ‚†¢‚¢Ñ‚†Ä‚¢Ä‚£º‚£ø‚£ß‚¢Ä‚°°‚†î‚£ª‚°ü‚†Ä
#         ‚†Ä‚†π‚£∑‚£å‚†ì‚†¨‚†Ä‚†Ä‚†à‚†ª‚£ø‚£∑‚£¶‚£Ñ‚£ø‚£ß‚†Ä‚†à‚†â‚†õ‚†ª‚¢∑‚£∂‚£Æ‚£•‚£Ñ‚£Ä‚°Ä‚†Ä‚†Ä‚†π‚†∑‚†ü‚†ã‚†Ä‚†Ä‚¢Ä‚£Ä‚£§‚£∑‚£ø‚†ø‚£ø‚£ø‚†Ä‚†Ä‚¢∞‚°ø‚†Å‚†Ä
#         ‚†Ä‚†Ä‚†à‚†ª‚£Ø‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚°å‚†ô‚£ø‚£ø‚£ø‚£∂‚£§‚£Ñ‚°Ä‚£º‚°è‚†Ä‚†â‚†â‚†õ‚¢ª‚£ø‚†ü‚†ø‚†ø‚£ø‚°ø‚†ø‚†ü‚†õ‚£ø‚°è‚†Ä‚£ø‚°á‚£ø‚£ø‚†Ä‚†Ä‚£∫‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚£∑‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ª‚£¶‚£æ‚†á‚†à‚†ô‚†õ‚†ø‚£ø‚£ø‚£∑‚£∂‚£§‚£§‚£§‚£§‚£ø‚£§‚£§‚£§‚£º‚£ß‚£§‚£§‚£§‚£º‚£∑‚£¥‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢æ‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚£∑‚°Ñ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚£¶‚£Ñ‚†Ä‚†Ä‚†Ä‚£∏‚°è‚†â‚†ô‚†õ‚†ø‚¢ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚£ø‚†Ä‚†Ä‚¢æ‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢ø‚£¶‚°Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚¢∑‚£¶‚£†‚£ø‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢à‚£ø‚†Ä‚†â‚†â‚¢â‚£ø‚†õ‚†õ‚¢ª‚°ø‚†ã‚£π‚°ü‚¢π‚£ø‚£æ‚†á‚†Ä‚†Ä ‚£∫‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚†ª‚£¶‚£â‚†ì‚†§‚£â‚†í‚†§‚£Ä‚†à‚†ô‚†ª‚†∑‚¢∂‚£§‚£§‚£Ñ‚£∏‚£ø‚£Ä‚£Ä‚£Ä‚£∏‚£ü‚£Ä‚£†‚£ø‚£á‚£¥‚£ø‚£∂‚°æ‚†ü‚†Å‚†Ä‚†Ä‚†Ä ‚¢º‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ø‚£¶‚£å‚°â‚†≤‚†§‚£â‚†í‚†¶‚¢Ñ‚£Ä‚†Ä‚†à‚†â‚†â‚†â‚†â‚†â‚†â‚†ã‚†â‚†â‚†â‚†â‚†â‚†â‚†Ä‚†Ä‚†Ä‚°†‚†Ä‚†Ä‚°Ä‚†Ä  ‚¢∏‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚†ª‚†∑‚£¶‚£Ñ‚°â‚†ë‚†í‚†¨‚†≠‚£ñ‚£í‚°§‚†§‚†§‚†§‚†§‚†§‚†§‚†§‚£Ä‚¢Ñ‚°†‚†§‚†§‚†í‚†â‚†Ä‚¢Ä‚°∞‚†É‚†Ä  ‚¢∏‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†∑‚£∂‚£§‚£Ä‚†Ä‚†Ä‚†à‚†â‚†â‚†í‚†í‚†í‚†í‚†ê‚††‚†¶‚†¥‚†§‚†¥‚†§‚†¥‚†í‚†â‚†Ä‚†Ä‚†Ä  ‚£º‚°á‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†õ‚†ø‚£∂‚£¶‚£§‚£§‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä   ‚£†‚£æ‚†è‚†Ä‚†Ä‚†Ä
#         ‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†ô‚†õ‚†ª‚†∑‚†∂‚¢∂‚£¶‚£§‚£§‚£§‚£§‚£§‚°¥‚†∂‚†ü‚†ã‚†Å‚†Ä‚†Ä‚†Ä‚†Ä
from config import *


class ExplainBlyat(BaseFilter):
    async def __call__(self, message: Message) -> bool:
        required = '–ø–æ—è—Å–Ω–∏ –∑–∞ '
        return message.text[0:len(required)].lower() == required


meme_button: KeyboardButton = KeyboardButton(
    text='–ú–µ–º–∞—Å')
demotivator_button: KeyboardButton = KeyboardButton(
    text='–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä')
book_button: KeyboardButton = KeyboardButton(
    text='–ß—Ç–∏–≤–æ')
settings_button: KeyboardButton = KeyboardButton(
    text='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
basic_keyboard: ReplyKeyboardMarkup = ReplyKeyboardMarkup(
    keyboard=[[meme_button, demotivator_button], [book_button, settings_button]], resize_keyboard=True)


@dp.message(F.text, ExplainBlyat())
async def explain_func(message: Message):
    required = '–ø–æ—è—Å–Ω–∏ –∑–∞ '
    txt = message.text[len(required):]

    sent_message = await message.answer('–°–µ–∫—É–Ω–¥—É, –±—Ä–∞—Ç–∞–Ω, —à–µ—Å—Ç–µ—Ä—ë–Ω–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç')
    loading_task = asyncio.create_task(loading_indicator(sent_message.chat.id, sent_message.message_id))
    try:
        response = await get_neuro_comment(txt.replace("\n", " "))
        await message.answer(response, reply_markup=basic_keyboard)
    finally:
        loading_task.cancel()
        await bot.delete_message(chat_id=message.chat.id, message_id=sent_message.message_id)


@dp.message(Command(commands='delete_pictures'), F.from_user.id.in_({972753303}))
async def delete_pictures_in_directory(message: Message):
    try:
        directory = f'{os.path.dirname(__file__)}/pictures'
        files = os.listdir(directory)
        for file in files:
            file_path = os.path.join(directory, file)
            os.remove(file_path)
        await message.answer('–§–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã! ‚úÖ')
    except Exception as e:
        await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 634\n{e}')


@dp.message(CommandStart())
async def process_start_command(message: Message):
    await UserDB.add_new_user(message.from_user.id, message.from_user.username)
    await message.answer(
        '–ó–¥–∞—Ä–æ–≤–∞! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞–≤–∏—Ç—å –ª—ã–±—É ü§£ü§£ü§£\n\n–¢—ã–∫–∞–π –Ω–∞ <b>/help</b> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö–∏-—Ö–∏ —Ö–∞-—Ö–∞ –±–æ—Ç–æ–º üëç',
        reply_markup=basic_keyboard)


@dp.message(Command(commands='meme'))
async def send_meme_lmao(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='in', city_meme=True)


@dp.message(Command(commands='help'))
async def help_command(message: Message):
    await message.answer('<b>–ü–æ–º–æ—â—å –∫–∞–ª–µ–∫–∞–º</b>\n'
                         '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∂–∞–∫–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏ —Å–Ω–∏–∑—É (–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω <i>/example</i>)\n\n'
                         '<i><b>¬´–ú–µ–º–∞—Å¬ª –∏ ¬´–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä¬ª</b></i>\n'
                         '–ü–∏—à–µ—à—å —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n'
                         '<b>–í—Å—ë —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏!</b> (Shift + Enter)\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–∏—à–∏, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –≥—É–≥–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏—â–µ—à—å\n'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É\n'
                         '–ù–∞–¥–ø–∏—Å—å —Å–Ω–∏–∑—É\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n\n'
                         '–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ—ë: —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É –∏ —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É\n'
                         '–ù–∞–¥–ø–∏—Å—å —Å–Ω–∏–∑—É</blockquote>\n\n'
                         '–ú–æ–∂–Ω–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n\n'
                         '–ò–ª–∏ –≤–æ–æ–±—â–µ –æ–¥–Ω—É –Ω–∞–¥–ø–∏—Å—å'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å</blockquote>\n\n'
                         '<i><b>¬´–ß—Ç–∏–≤–æ¬ª</b></i>\n'
                         '<blockquote>–ê–≤—Ç–æ—Ä (–§–ò–û)\n'
                         '–ù–∞–∑–≤–∞–Ω–∏–µ\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n', reply_markup=basic_keyboard)


@dp.message(Command(commands='example'))  # /example
async def example_command(message: Message):
    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
        photo1 = InputMediaPhoto(media=FSInputFile(f"{os.path.dirname(__file__)}/assets/example1.jpg"))
        photo2 = InputMediaPhoto(media=FSInputFile(f"{os.path.dirname(__file__)}/assets/example2.jpg"))
        photo3 = InputMediaPhoto(media=FSInputFile(f"{os.path.dirname(__file__)}/assets/example3.jpg"))
        await bot.send_media_group(media=[photo1, photo2, photo3], chat_id=message.chat.id)


@dp.message(Command(commands='about'))  # /about
async def about_command(message: Message):
    await message.answer('<i>–ö–æ–º–∞–Ω–¥–∞ Phasalopedia. 12+\n2024</i>\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n<b>@nklnkk</b>', reply_markup=basic_keyboard)


@dp.message(Command(commands='deme'))
async def create_demo_command(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='de', city_meme=True)


@dp.message(Command(commands='query'), F.from_user.id.in_(ADMINS))  # /query
async def query_command(message: Message):
    txt = ''
    amount = find_first_number(message.text)
    if not amount:
        amount = 5
    for user in await UserQueryDB.get_last_queries(amount):
        username = (await UserDB.get_user(user.user_id)).username
        line = (f'<i>{username if username else user.user_id}</i> ‚Äî '
                f'{", ".join(f"[{datetime.datetime.utcfromtimestamp(unix_time) + datetime.timedelta(hours=3)}]: <blockquote>{format_string(query)}</blockquote>" for unix_time, query in user.queries.items())}\n\n')
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt)
            except Exception as e:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
            txt = line
    if len(txt) != 0:
        await message.answer(txt)
    else:
        await message.answer('–ó–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ –±—ã–ª–æ')


@dp.message(Command(commands='get_users'), F.from_user.id.in_(ADMINS))  # /get_users
async def users_command(message: Message):
    users = await UserDB.get_users_from_db()
    txt = f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(users)}</b>\n\n'
    for user in users:
        memes_amount = len((await UserQueryDB.get_user_queries(user.user_id)).queries)
        emoji = 'üòê'
        if memes_amount > 10:
            emoji = 'ü§£'
        elif memes_amount > 0:
            emoji = 'üòÇ'
        line = (f'<b>{"@" + user.username if user.username else "üê∏"}</b> | <i>{user.user_id}</i> |' + (' üíÄ |' if user.banned else '') +
                (' üëë |' if user.premium else '') + f' {emoji} {memes_amount}\n')
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt)
            except Exception as e:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
            txt = line
    if len(txt) != 0:
        await message.answer(txt)


@dp.message(Command(commands='user_query'), F.from_user.id.in_(ADMINS))  # /user_query
async def user_query_command(message: Message):
    user_id = find_first_number(message.text)
    query = (await UserQueryDB.get_user_queries(user_id)).queries
    if not user_id or not query:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π <i>user_id</i> –∏–ª–∏ —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞–ø—Ä–æ—Å—ã')
        return
    txt = ''
    for unix_time, text in query.items():
        line = f'[{datetime.datetime.utcfromtimestamp(unix_time) + datetime.timedelta(hours=3)}]: <blockquote>{format_string(text)}</blockquote>\n\n'
        if len(line) + len(txt) < 4096:
            txt += line
        else:
            try:
                await message.answer(text=txt)
            except Exception as e:
                await message.answer(text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
            txt = line
    if len(txt) != 0:
        await message.answer(txt)


@dp.message(Command(commands='getcoms'), F.from_user.id.in_(ADMINS))  # /getcoms
async def all_commands(message: Message):
    await message.answer('/help\n'
                         '/get_users\n'
                         '/query <i>(int)</i>\n'
                         '/user_query <i>(user_id)</i>')


@dp.message(Command(commands='book'))
async def create_demo_command(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='bo')


@dp.message(F.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def settings_handler(message: Message, edit=False, user_id=None):
    user = await UserDB.get_user(user_id if user_id else message.from_user.id, message.from_user.username)
    #                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    #                                          <--         phasalo          -->

    txt = ('<b>–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n'
           f'–†–µ–∂–∏–º: <i><b>{modes_name[user.mode][0]}</b></i>\n'
           f'–¶–≤–µ—Ç –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: <i><u>{get_colorname_by_hashcode(user.upper_color)}</u></i>\n'
           f'–¶–≤–µ—Ç –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: <i><u>{get_colorname_by_hashcode(user.bottom_color)}</u></i>\n'
           f'–ö–æ–Ω—Ç—É—Ä –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: <i><u>{get_colorname_by_hashcode(user.upper_stroke_color)}</u></i>\n'
           f'–ö–æ–Ω—Ç—É—Ä –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞: <i><u>{get_colorname_by_hashcode(user.bottom_stroke_color)}</u></i>\n'
           f'–†–µ–≥–∏—Å—Ç—Ä —Ç–µ–∫—Å—Ç–∞: <i>{"<b>–ë–ê–õ–¨–®–ò–ï –ë–£–ö–ê–í–´</b>" if user.giant_text else "–º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–æ–≤–∫–∏"}</i>\n')
    if edit:
        await message.edit_text(txt, reply_markup=get_keyboard(user))
    else:
        await message.answer(txt, reply_markup=get_keyboard(user))


@dp.message(F.text == '–î–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä')
async def set_demotivator(message: Message):
    await UserDB.change_mode(message.from_user.id, 'de')
    await message.answer('–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä</b>', reply_markup=basic_keyboard)


@dp.message(F.text == '–ú–µ–º–∞—Å')
async def set_meme(message: Message):
    await UserDB.change_mode(message.from_user.id, 'in')
    await message.answer('–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>–º–µ–º–∞—Å</b>', reply_markup=basic_keyboard)


@dp.message(F.text == '–ß—Ç–∏–≤–æ')
async def set_book(message: Message, ):
    await UserDB.change_mode(message.from_user.id, 'bo')
    await message.answer('–†–µ–∂–∏–º –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ <b>—á—Ç–∏–≤–æ</b>', reply_markup=basic_keyboard)


async def send_meme(message: Message, user: UserDB, mode=None, city_meme=False):
    try:
        if message.text is None and message.caption is None:
            await message.answer('–¢—ã –∑–∞–±—ã–ª –ø—Ä–æ –Ω–∞–¥–ø–∏—Å—å')
            return
        meme_txt = message.text if message.text else message.caption
        photo_id = await UserQueryDB.add_new_query(user.user_id, int(time.time()), meme_txt)
        meme_txt = meme_txt.strip().split('\n')
        meme_txt[0] = meme_txt[0].replace('/', '').replace("\\", '')
        photo_path = None
        if city_meme:
            meme_txt = [None, None, None]
        if message.photo:
            photo_path = f'{os.path.dirname(__file__)}/pictures/photo{random.randint(1, 10 ** 8)}.jpg'
            await bot.download_file((await bot.get_file(message.photo[-1].file_id)).file_path, photo_path)

        try:
            meme_path = await create_meme(photo_path, *meme_txt,
                                          mode=mode if mode else user.mode,
                                          upper_color=user.upper_color,
                                          bottom_color=user.bottom_color,
                                          upper_stroke_color=user.upper_stroke_color,
                                          bottom_stroke_color=user.bottom_stroke_color,
                                          stroke_width=user.stroke_width,
                                          giant_text=user.giant_text)

            keyboard = basic_keyboard if (city_meme or message.photo) else get_photo_inline_keyboard(photo_id)
            await message.answer_photo(photo=FSInputFile(meme_path), reply_markup=keyboard)
            os.remove(meme_path)
        except Exception as e:
            await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=basic_keyboard)
            await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!\n{e}')
    except Exception as e:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=basic_keyboard)
        await bot.send_message(chat_id=972753303, text=f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞! –ö–æ–¥ 234\n{e}')


@dp.callback_query(SetsCallBack.filter())
async def settings_button_distributor(callback: CallbackQuery, callback_data: SetsCallBack):
    action = callback_data.action
    user = await UserDB.get_user(callback.from_user.id, callback.from_user.username)

    async def user_mode(user_loc):
        current_mode_name = f"–£ –≤–∞—Å –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º: <b>{modes_name[user_loc.mode][0]}</b>"
        await callback.message.edit_text(current_mode_name, reply_markup=get_mode_keyboard(user_loc.mode))

    async def color_mode(user_loc, action_loc):
        txt = ''
        mode_offset = 1
        current_color = '#000000'
        if action_loc == UPPERTEXT_ACTION:
            txt = '–≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞'
            mode_offset = 1
            current_color = user_loc.upper_color
        elif action_loc == BOTTOMTEXT_ACTION:
            txt = '–Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞'
            mode_offset = 10
            current_color = user_loc.bottom_color
        elif action_loc == UPPERSTROKE_ACTION:
            txt = '–∫–æ–Ω—Ç—É—Ä–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞'
            mode_offset = 100
            current_color = user_loc.upper_stroke_color
        elif action_loc == BOTTOMSTROKE_ACTION:
            txt = '–∫–æ–Ω—Ç—É—Ä–∞ –Ω–∏–∂–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞'
            mode_offset = 1000
            current_color = user_loc.bottom_stroke_color
        await callback.message.edit_text(f'–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç <i>{txt}</i> –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã',
                                         reply_markup=get_color_keyboard(current_color, mode_offset))

    async def text_case_mode(user_loc):
        await callback.message.edit_text(f'–°–µ–π—á–∞—Å —Å—Ç–æ—è—Ç {"<b>–ë–ê–õ–¨–®–ò–ï –ë–£–ö–ê–í–´</b>" if user_loc.giant_text else "<i>–º–∞–ª–µ–Ω—å–∫–∏–µ –±—É–∫–æ–≤–∫–∏</i>"}',
                                         reply_markup=get_case_keyboard(user_loc.giant_text))

    if user is None:
        await callback.message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!')

    if action == USERMODE_ACTION:
        await user_mode(user)

    if action in MODE_CODES_set:
        await UserDB.change_mode(callback.from_user.id, get_mode_name_by_code(action))
        user = await UserDB.get_user(callback.from_user.id, callback.from_user.username)
        await user_mode(user)

    if action == SETTINGS_ACTION:
        await settings_handler(callback.message, True, callback.from_user.id)
    if action in (UPPERTEXT_ACTION, BOTTOMTEXT_ACTION, UPPERSTROKE_ACTION, BOTTOMSTROKE_ACTION):
        await color_mode(user, action)

    if action in COLOR_CODES_set:
        color_places = ('upper_color', 'bottom_color', 'upper_stroke_color', 'bottom_stroke_color')
        color_codes = (UPPERTEXT_ACTION, BOTTOMTEXT_ACTION, UPPERSTROKE_ACTION, BOTTOMSTROKE_ACTION)
        offsets = {1000: 3, 100: 2, 10: 1}
        for div, idx in offsets.items():
            if action % div == 0:
                color_place = color_places[idx]
                command_name = color_codes[idx]
                offset = div
                break
        else:
            color_place = color_places[0]
            command_name = color_codes[0]
            offset = 1

        await UserDB.change_color(callback.from_user.id, get_colorhash_by_code(action // offset), color_place)
        user = await UserDB.get_user(callback.from_user.id, callback.from_user.username)
        await color_mode(user, command_name)
    if action == TEXTCASE_ACTION:
        await text_case_mode(user)
    if action in (SETgiantcase, SETsmallcase):
        await UserDB.change_text_case(callback.from_user.id, True if action == SETgiantcase else False)
        user = await UserDB.get_user(callback.from_user.id, callback.from_user.username)
        await text_case_mode(user)


@dp.callback_query(GenerateCallBack.filter())
async def regenerate_button_distributor(callback: CallbackQuery, callback_data: GenerateCallBack):
    photo_id = callback_data.photo_id
    query = await UserQueryDB.get_query_by_id(photo_id)
    meme_txt = query.strip().split('\n')
    meme_txt[0] = meme_txt[0].replace('/', '').replace("\\", '')
    user = await UserDB.get_user(user_id=callback.from_user.id)
    meme_path = await create_meme(None, *meme_txt,
                                  mode=user.mode,
                                  upper_color=user.upper_color,
                                  bottom_color=user.bottom_color,
                                  upper_stroke_color=user.upper_stroke_color,
                                  bottom_stroke_color=user.bottom_stroke_color,
                                  stroke_width=user.stroke_width,
                                  giant_text=user.giant_text)
    await callback.message.edit_media(media=InputMediaPhoto(media=FSInputFile(meme_path)), reply_markup=get_photo_inline_keyboard(photo_id))
    os.remove(meme_path)


@dp.message(F.content_type.in_({'text', 'photo'}))
async def general_send_meme(message: Message):
    user = await UserDB.get_user(message.from_user.id, message.from_user.username)
    await send_meme(message, user)


@dp.message()
async def any_message(message: Message):
    await message.answer(text=random.choice(hz_answers), reply_markup=basic_keyboard)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    print('–†–µ–∂–∏–º –∫–ª–æ—É–Ω–∞ –≤–∫–ª—é—á—ë–Ω!')
    asyncio.run(main())
