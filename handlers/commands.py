from aiogram.filters import Command, CommandStart
import os
from aiogram import Router, F
from keyboards import user_keyboards
from aiogram.types import Message
from DB.users_info import UserDB
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import FSInputFile, InputMediaPhoto
from config_data.config import bot
from handlers.user_handlers import send_meme

router = Router()


@router.message(CommandStart())  # /start
async def process_start_command(message: Message):
    await UserDB.add_new_user(message.from_user.id, message.from_user.username)
    await message.answer(
        '–ó–¥–∞—Ä–æ–≤–∞! –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥–∞–≤–∏—Ç—å –ª—ã–±—É ü§£ü§£ü§£\n\n–¢—ã–∫–∞–π –Ω–∞ <b>/help</b> —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö–∏-—Ö–∏ —Ö–∞-—Ö–∞ –±–æ—Ç–æ–º üëç',
        reply_markup=user_keyboards.basic_keyboard)


@router.message(Command(commands='meme'))  # /meme
async def send_meme_lmao(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='in', city_meme=True)


@router.message(Command(commands='help'))  # /help
async def help_command(message: Message):
    await message.answer('<b>–ü–æ–º–æ—â—å –∫–∞–ª–µ–∫–∞–º</b>\n'
                         '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∂–∞–∫–∏ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–æ—á–∫–∏ —Å–Ω–∏–∑—É (–í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω <i>/example</i>)\n\n'
                         '<i><b>¬´–ú–µ–º–∞—Å¬ª –∏ ¬´–¥–µ–º–æ—Ç–∏–≤–∞—Ç–æ—Ä¬ª</b></i>\n'
                         '–ü–∏—à–µ—à—å —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É, —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É.\n'
                         '<b>–í—Å—ë —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ—á–∫–∏!</b> (Shift + Enter)\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–∏—à–∏, –∫–∞–∫ –±—É–¥—Ç–æ –≤ –≥—É–≥–ª–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏—â–µ—à—å\n'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É\n'
                         '–ù–∞–¥–ø–∏—Å—å —Å–Ω–∏–∑—É\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n\n'
                         '–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å —Ñ–æ—Ç–∫—É –≤–º–µ—Å—Ç–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å –µ—ë: —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É –∏ —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É\n'
                         '–ù–∞–¥–ø–∏—Å—å —Å–Ω–∏–∑—É</blockquote>\n\n'
                         '–ú–æ–∂–Ω–æ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n\n'
                         '–ò–ª–∏ –≤–æ–æ–±—â–µ –æ–¥–Ω—É –Ω–∞–¥–ø–∏—Å—å'
                         '<blockquote>–ù–∞–¥–ø–∏—Å—å</blockquote>\n\n'
                         '<i><b>¬´–ß—Ç–∏–≤–æ¬ª</b></i>\n'
                         '<blockquote>–ê–≤—Ç–æ—Ä (–§–ò–û)\n'
                         '–ù–∞–∑–≤–∞–Ω–∏–µ\n'
                         '–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É</blockquote>\n', reply_markup=user_keyboards.basic_keyboard)


@router.message(Command(commands='example'))  # /example
async def example_command(message: Message):
    assets_directory = os.path.join(os.path.dirname(__file__), os.pardir, 'assets')

    async with ChatActionSender(bot=bot, chat_id=message.from_user.id, action='upload_photo'):
        photo1 = InputMediaPhoto(media=FSInputFile(os.path.join(assets_directory, 'example1.jpg')))
        photo2 = InputMediaPhoto(media=FSInputFile(os.path.join(assets_directory, 'example2.jpg')))
        photo3 = InputMediaPhoto(media=FSInputFile(os.path.join(assets_directory, 'example3.jpg')))

        await bot.send_media_group(media=[photo1, photo2, photo3], chat_id=message.chat.id)


@router.message(Command(commands='about'))  # /about
async def about_command(message: Message):
    await message.answer('<i>–ö–æ–º–∞–Ω–¥–∞ Phasalopedia. 16+\n2024</i>\n\n–ü–æ–¥–¥–µ—Ä–∂–∫–∞:\n<b>@nklnkk</b>', reply_markup=user_keyboards.basic_keyboard)


@router.message(Command(commands='deme'))  # /deme
async def create_demo_command(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='de', city_meme=True)


@router.message(Command(commands='book'))  # /book
async def create_demo_command(message: Message):
    await send_meme(message, user=await UserDB.get_user(message.from_user.id, message.from_user.username), mode='bo')
